FLAMEA.org - Technical SpecificationsThis document details the technical architecture, technologies, and services used to build and operate the FLAMEA.org platform.1. Core ArchitectureThe website is built as a Static Site architecture. This means it consists of pre-built HTML, CSS, and JavaScript files that are served directly to the user's browser. This approach is highly performant, secure, and cost-effective. Dynamic functionality is achieved on the client-side using JavaScript and external services (APIs).2. Frontend TechnologiesHTML5: Used for the structure and semantic markup of all web pages.CSS3: Used for styling and presentation.Tailwind CSS: A utility-first CSS framework loaded via CDN. It is used for the vast majority of styling, enabling rapid development of a consistent and responsive user interface.Custom CSS (assets/css/style.css): A dedicated stylesheet for global styles, custom animations, and complex component styling that is not easily achieved with Tailwind utilities alone.JavaScript (ES6+): The primary language for all client-side logic and interactivity. The project heavily utilizes ES6 Modules (import/export) for clean, organized, and maintainable code.3. Backend as a Service (BaaS)The platform leverages Google Firebase to provide powerful backend functionality without managing a traditional server.Firebase Authentication:Purpose: Manages all aspects of user identity.Features: Provides secure email/password registration and login, as well as social sign-in via Google. It handles user session management, password resets, and profile information (e.g., display name).Firestore Database:Purpose: A flexible, scalable NoSQL database used for persistent data storage for registered members.Structure: Data is organized into collections and documents. All user-specific data is stored securely under a path tied to their unique User ID (e.g., users/{userId}/...).Use Cases: Storing reading progress in the Book Reader, saving user-entered data from the Parenting Plan and Forms tools, and logging events in the Family Activity Tracker.4. Third-Party Services & APIsGoogle Gemini AI:Purpose: Powers the "AI Legal Assistant" chatbot.Implementation: The chatbot.js script makes a fetch request to the Google Generative Language API. It sends the user's prompt and a portion of the chat history to the gemini-2.0-flash model and displays the generated response.AllOrigins CORS Proxy:Purpose: A free proxy service used to bypass Cross-Origin Resource Sharing (CORS) browser restrictions.Implementation: The podcast-player.js script requires fetching an XML-based RSS feed from another domain (anchor.fm). Browsers block this for security reasons. AllOrigins acts as a middleman, fetching the feed on its server and passing it back to our script with the correct headers, allowing the podcast player to function.jsPDF Library:Purpose: Enables client-side PDF generation.Implementation: Used in the plan-builder.js and upcoming form-filler.js. It takes the HTML content of the document preview and converts it into a downloadable PDF file directly in the user's browser, requiring no server-side processing.5. JavaScript LibrariesFont Awesome: Provides a comprehensive library of icons used throughout the site for visual clarity and branding.RSS-Parser: A lightweight library used in podcast-player.js to parse the XML from the podcast RSS feed into a structured JavaScript object, making it easy to display the episodes.